{
  "_id": "com.unity.addressables",
  "name": "com.unity.addressables",
  "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
  "provider": "upm",
  "category": "",
  "dist-tags": {
    "latest": "1.21.12"
  },
  "versions": {
    "1.21.12": {
      "unity": "2019.4",
      "_upm": {
        "changelog": "- Fixed issue with a potential race conditon when calling GetAssetBundle to load local files using WaitForCompletion\n- Fixed compiler error when using the profiler module on a noncaching platform.\n- Fixed issue where stack overflow occurs for http requests on Unity 2022.1+ when insecure requests are disallowed.\n- Added groups field to Inspector and move assets popup.\n- Fixed issue where sprite atlas cannot be assigned to an AssetReferenceAtlasedSprite."
      },
      "upmCi": {
        "footprint": "9f80c82ecc1942f2b33f7127eb1276485b3045b2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.addressables@1.21/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "7fd90c8ec6027a1b533ef270b9067262eb8d6e3e"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "dist": {
        "shasum": "fad4d62abe37d913fe8edd6d666823dd2e2ba7da",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.21.12.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.21.12",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.21.5",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.21.10": {
      "unity": "2019.4",
      "_upm": {
        "changelog": "- Fixed Addressables profiler not correctly displaying loaded Asset subObjects where a Asset was loaded due to a direct reference to one of its subObjects.\n- Fixed an issue where bundles built with the Append Hash to FIlename bundle naming option had strange interactions with the Prevent Updates option\n- Improved performance of BuildLayoutGenerationTask"
      },
      "upmCi": {
        "footprint": "51c49ea5cc95cd4d1de19971b606a09ff19d2a06"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.addressables@1.21/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "1ecf2104cf929f1dcf4118f319fcce28047673c8"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "dist": {
        "shasum": "a9af97cbb39369ce802f1e3d3e8b9642cad8a300",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.21.10.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.21.10",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.21.3",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.21.9": {
      "unity": "2019.4",
      "_upm": {
        "changelog": "- Removed code within WriteObjectToByteList that would never be reached\n- Fixed an issue where SceneOps would have update called on them twice per frame\n- Fixed an issue where in some circumstances an Operation would continue to have update called on it even after it finished.\n- Fixed an issue with Labels window after a domain reload causing a null reference exception.\n- Added Remove all unused labels option to labels popup window.\n- Fixed issue when not including the address and guid in catalog using content update workflow, would always indicate the asset as changed\n- Fixed Addressables profiler module help links to documentation.\n- Fixed issue where scenes unloaded due to another scene loading in single mode, would result in the profiler module still reporting the scene as loaded.\n- Groups window will now show labels of entries that are not a part of the settings.\n- Fixed 404s when uploading files with incorrect environment ID\n- Fixed issue where BuildLayoutGenerationTask would sometimes fail in large projects"
      },
      "upmCi": {
        "footprint": "5d9ed8ec49b8d3cd59d09bc7b1e294a22346f361"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.addressables@1.21/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "4af883961d7741769a2318578b3405c71bd2d7a6"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "dist": {
        "shasum": "72d1aed204622bf8f5fb0784c9d0b093fe6264c0",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.21.9.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.21.9",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.21.3",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.21.8": {
      "unity": "2019.4",
      "_upm": {
        "changelog": "- Optimised PostProcessBundles\n- Fixed issue where having a runtime profile variable or property to evaluate web urls on Windows platforms can result in malformed urls.\n- Fixed possible `NullRefernceException` when importing new assets and `AddressableAssetUtility+SortedDelegate,Register` was called.\n- Fixed an issue where EditorGUI.changed would not be properly set in certain circumstances when updating AssetReferences using the inspector\n- Fixed CCD build and release to properly upload static groups\n- Fixed CCD build and release to allow both static and managed groups in the same profile\n- Include additional object dependency information in build layout report\n- Addressables Profiler module compatible with Unity Editor 2022.2+\n- Addressables Build Report window added. Compatible with Unity Editor 2022.2+"
      },
      "upmCi": {
        "footprint": "6c922adfffd6a4312b0f75bd0293c7c1e7b170e6"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.addressables@1.21/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "983b68f6151bf3c52a38fd509d418d1369086e63"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "dist": {
        "shasum": "c4afa17427ad629285c593647e3a16e7d871fc45",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.21.8.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.21.8",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.21.3",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.21.3": {
      "unity": "2019.4",
      "_upm": {
        "changelog": "- Optimised PostProcessBundles\n- Fixed issue where having a runtime profile variable or property to evaluate web urls on Windows platforms can result in malformed urls.\n- Fixed possible `NullRefernceException` when importing new assets and `AddressableAssetUtility+SortedDelegate,Register` was called.\n- Fixed an issue where EditorGUI.changed would not be properly set in certain circumstances when updating AssetReferences using the inspector\n- Fixed CCD build and release to properly upload static groups\n- Fixed CCD build and release to allow both static and managed groups in the same profile\n- Include additional object dependency information in build layout report\n- Addressables Profiler module compatible with Unity Editor 2022.2+\n- Addressables Build Report window added. Compatible with Unity Editor 2022.2+"
      },
      "upmCi": {
        "footprint": "b09026fdef47759ea53edb715483d664ae25b805"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.addressables@1.21/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "0ca356afa58812a67cd094dc54dd4df06efb93cb"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "dist": {
        "shasum": "d16efc07623a0cbbb1a6b5d57fb32be65c672fc3",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.21.3.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.21.3",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.21.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.21.2": {
      "unity": "2019.4",
      "_upm": {
        "changelog": "- Fixed issue where folders in Groups window would display the subObjects of assets without expanding the assets.\r\n- Added the ability to copy a subAsset address to clipboard from right click.\r\n- Fixed bundle naming mode option names being unclear when selecting multiple groups.\r\n- Optimised string usage across package\r\n- Updated the way that the Build Layout calculates efficiency to base it off of the dependent file sizes instead of the dependent file count\r\n- Fixed issue where Addressables inspector would not show until Addressables settings have been initialised\r\n- Fixed issue where editor only assets would be marked as changed in the Check for Content Update restrictions window"
      },
      "upmCi": {
        "footprint": "5b15d043a5a650aa946f7ebb6f696e9c22f75431"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.addressables@1.21/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "2745ec8bd6963ed203f50caddd11c9eba2614f5a"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "dist": {
        "shasum": "d258186e6d4676d962c58968eb6f6c55c2a4c304",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.21.2.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.21.2",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.21.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.21.1": {
      "unity": "2019.4",
      "upmCi": {
        "footprint": "77bea3604ee3227246ac04ec0c0051bcd2e41074"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "c17ad7379e2d92336aa100abb41c8f86536affc2"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "dist": {
        "shasum": "be21806bc3b128729614c2a13c1867db87d4ba99",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.21.1.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.21.1",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.21.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.20.5": {
      "unity": "2019.4",
      "upmCi": {
        "footprint": "6cdc743fe0e4cce3d3682685be9937ae7697368f"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "9eff436324157f2516645735c070f9de223019fb"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "dist": {
        "shasum": "613a43ac02f083abc8f47847c877b87f91e130eb",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.20.5.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.20.5",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.20.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.20.3": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "3f7d9cb75a18834feebead299cb25984481580c7"
      },
      "_upm": {
        "changelog": "- Added documentation to several areas (Build, Settings, Profiles, Catalogs, Runtime loading).\r\n- Fixed issue where GatherAllAssets filter would still return subObjects of filtered Assets.\r\n- Fixed issue where content update entries dependent on modified entries and not found as modified by check for content update restrictions\r\n- Fixed issue where the notification for changed static content wasn't getting cleared for assets inside of folders.\r\n- Fixed issue where Sprites belonging to a Sprite Atlas aren't assignable to an AssetReferenceSprite field.\r\n- Fixed issue where RefreshGlobalProfileVariables is called during script compilation.\r\n- Fixed issue where UnauthorizedAccessException occurs when lacking permissions to cache a remote catalog.\r\n- Fixed stack overflow with SortedDelegate and Addressables OnPostProcessAllAssets occurred during invoke a queued invoke and registering a new delegate.\r\n- Fixed issue where SceneLoadParameters were not used when using LoadSceneAsync using SceneLoadParameters.\r\n- Fixed issue where Schema gui with List members would not save when editing in the Group inspector.\r\n- Fixed issue where Serializable types of structs and class members of MonoBehaviour or ScriptableObjects would be returned as a location with GetResourceLocations but would not be loadable.\r\n- Fixed issue where setting default group does not dirty settings. Causing a reload to reset to previous default group.\r\n- Added updated documentation for the 1.20 Content Update workflows\r\n- Fixed issue where AssetReference subasset popup text is always white regardless of Editor skin.\r\n- Fixed issue where newly created assets would not show the Addressables inspector until after a domain reload.\r\n- Optimised Build pass Post Process Bundles when running on a large number of asset dependency trees.\r\n- A warning now gets printed if caching data fails due to Application.persistentDataPath being an empty string\r\n- Fixed issue where pressing the Reset button on the Hosting window would not assign a new random available port number.\r\n- Fixed bug where WaitForCompletion could hang indefinitely under certain race conditions (primarily on Android)\r\n- Fixed a bug where calling WaitForCompletion on a LoadAssetAsync call that was loading from Resources would freeze the editor."
      },
      "upmCi": {
        "footprint": "341f6064b6dc63bc0c57e47bdcca60f9c5a44aab"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.20.3",
      "_integrity": "sha512-Kgp0RSeVy/i9mZTYagFxn0BBORwzyvHCJG+zCUwlvE9HUz7CsmYOkUl9okSUykH6GSKGBYHTZMZpIJdKYQz/hA==",
      "_resolved": "/tmp/com.unity.addressables@1.20.3-50a880fi.tgz",
      "_from": "file:/tmp/com.unity.addressables@1.20.3-50a880fi.tgz",
      "dist": {
        "shasum": "2b5ebf3b4d84bd13fb6b534c6dabed67632b55e3",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.20.3.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.20.3",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.20.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.20.0": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "62eeddf260866c0c536e22d7d95da54080ecf0a8"
      },
      "_upm": {
        "changelog": "- Added ability to get the download size of a given Content Catalog by its resource location\r\n- Add option to save the bundle build layout report as a json or txt file in the Preferences window.\r\n- Added sample for resolving duplicate dependencies to multiple groups.\r\n- AddressableAssetProfileSettings.GetProfileDataById and AddressableAssetProfileSettings.GetProfileDataByName public\r\n- Added ability to load scenes using SceneLoadParameters through Addressables API.\r\n- Made the following API public:\r\n  - AsyncOperationHandle.IsWaitingForCompletion\r\n  - AssetBundleResource.LoadType\r\n  - AssetBundleResource.GetLoadInfo()\r\n  - AssetBundleResource.GetAssetPreloadRequest()\r\n  - AssetBundleResource.Start()\r\n  - AssetBundleResource.Unload()\r\n  - WebRequestQueueOperation.Result\r\n  - WebRequestQueueOperation.OnComplete\r\n  - WebRequestQueueOperation.IsDone\r\n  - WebRequestQueueOperation.WebRequest\r\n  - WebRequestQueueOperation.ctor()\r\n  - WebRequestQueue.SetMaxConcurrentWebRequests()\r\n  - WebRequestQueue.QueueRequest()\r\n  - WebRequestQueue.WaitForRequestToBeActive()\r\n  - ResourceManagerConfig.ExtractKeyAndSubKey()\r\n  - UnityWebRequestUtilities.RequestHasErrors()\r\n  - UnityWebRequestUtilities.IsAssetBundleDownloaded()\r\n  - UnityWebRequestResult.Error.set\r\n  - UnityWebRequestResult.ShouldRetryDownloadError\r\n- Made the following API protected:\r\n  - AssetBundleProvider.UnloadingBundles.get\r\n  - AsyncOperationBase.ReferenceCount\r\n  - AsyncOperationBase.IncrementReferenceCount\r\n  - AsyncOperationBase.DecrementReferenceCount\r\n- Added functionality to extend groups window build menu with pre and post build methods\r\n- Fixed issue where custom analyze rules that are subclasses cannot be registered.\r\n- Added more tooltips to UI\r\n- Fixed issue where loading assets using a Location without initialising first would not initialise Addressables.\r\n- Content Update workflow has been changed to be more streamlined.  New settings have been added to handle Content Update and the previous state .bin file can now be automatically loaded instead of requiring manual selection.\r\n- Set default max concurrent Web requests value to 3.\r\n- Pre-cache delegate list for Completed and CompletedTypeless to reduce GC allocation.\r\n- Fixed issue where Scenes can be incorrectly reported as being in multiple bundles with Bundle Layout Preview analyze rule\r\n- Fixed bug where requests for a ResourceLocation that pointed to a scene in an Addressable folder wasn't returning the location\r\n- Fixed issue where content update could fail to update built-in shaders and monoscript bundles to load from the correct location.\r\n- Cache results of FindEntry to improve performance when no changes are made.\r\n- Fixed an issue where the AddressableAssetEntry returned by GetFolderSubEntry would not include the labels of the entry\r\n- Fixed issue where inherited fast mode scripts would fail to use instance and scene providers set for that build script object.\r\n- Fixed issue where multiple AssetReferences could not be dragged and dropped to a list or array.\r\n- Improved performance when deleting Addressable Asset Groups."
      },
      "upmCi": {
        "footprint": "edf075b68ae4bd768ddec0aefa480355db958991"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.20.0",
      "_integrity": "sha512-CYbyFJo9dlW0c3q+D6p1L13/z3kY2IvcMAybmGCuP/UIeBUcwz/gyxSSorA7iIFGh/7qV4qww53+aHzB7GfpJA==",
      "_resolved": "/tmp/com.unity.addressables@1.20.0-4gl4ty58.tgz",
      "_from": "file:/tmp/com.unity.addressables@1.20.0-4gl4ty58.tgz",
      "dist": {
        "shasum": "d7d3d373f6bab4c67c1b56bebf05230f87fd9dc9",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.20.0.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.20.0",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.6",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.19": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "2ac2ed2277c173a9a41ffeafa080525578c38e4f"
      },
      "upm": {
        "changelog": "- Improved message of InvalidKeyException errors.,- Improved exception message of RemoteProviderExceptions,- Fixed issue where Clear Cache Behavior setting was getting reverted when changed while multi-selecting schemas,- Fixed an issue where when building with Missing References in the groups window a NullRefException would occur,- Added documentation explaining why the user might hit a deadlock when calling WaitForCompletion when loading multiple scenes in succession,- Fixed issue where DownloadDependenciesAsync with merge mode did not unload AssetBundles correctly,- Added ComponentReference and Custom Analyze Rule to Samples folder.,- Fixed issue where BundledAssetGroupSchema custom paths reset to default local paths after a domain reload.,- Added assemblyInfo to manage visible internals,- Fixed issue causing InvalidOperationException when loading Addressable Settings from OnPostProcessAllAsset during a project load without a cached AssetDatabase,- Fixed an issue where calling LoadSceneAsync.WaitForCompletion immediately after loading a scene singly would cause a freeze"
      },
      "upmCi": {
        "footprint": "69a0ec9ac0d649931fd174de8af7cbe3ce5cc509"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "ComponentReference",
          "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/ComponentReference"
        },
        {
          "displayName": "Custom Analyze Rules",
          "description": "This sample shows how to create custom AnalyzeRules for use within the Analyze window. Both rules follow the recommended pattern for adding themselves to the UI. See the Custom Analyze Rules sample project located at github.com/Unity-Technologies/Addressables-Sample",
          "path": "Samples~/CustomAnalyzeRules"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.19",
      "_integrity": "sha512-Jt83iXSSyBpwpKk5sEwgFF01ahguMY47tlzh7IBHCTMnywrFFb0XnUBtSUD1hhABEdpTmC0qvAHGSPcVfP2Rbw==",
      "_resolved": "/tmp/com.unity.addressables@1.19.19-fuia3cia.tgz",
      "_from": "file:/tmp/com.unity.addressables@1.19.19-fuia3cia.tgz",
      "dist": {
        "shasum": "a1d977c098166fc4af275b5f1c7b80f43b181f25",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.19.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.19",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.6",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.18": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "7430a17e265967737a63efcf96f3e74aef76b8b4"
      },
      "upmCi": {
        "footprint": "b3542c9866278d84e84e7d27be8b802fe97da190"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.18",
      "_integrity": "sha512-/NO3Z6iZH+G/vvsSRDIOprg8mI3tZSg1+qjqHvfUMXqT7fn+JTdsEqIzX+fIoAyCNTs4+HNUvrv2QwgFwkuZSQ==",
      "_resolved": "/tmp/com.unity.addressables@1.19.18-15ljqby4.tgz",
      "_from": "file:/tmp/com.unity.addressables@1.19.18-15ljqby4.tgz",
      "dist": {
        "shasum": "abfd8de87d25a994c3e620b520b1a6217a52d6ae",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.18.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.18",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.6",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.17": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "7be4014159163b134b4a460f691b9f3ffb5bbc64"
      },
      "upmCi": {
        "footprint": "7ae87e686b34af72a2dc2e7b5f8b408c78614193"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.17",
      "_integrity": "sha512-kIVZs8PH2AaiKf+2sx97R2PmRrs+Qa+uKeZAKn+Eb9/mR2WdvO7EU6YHqaePLoRU/RqPiRVgDLVXd8owX1Y9ug==",
      "_resolved": "/pkgprom/com.unity.addressables-1.19.17.tgz",
      "_from": "file:com.unity.addressables-1.19.17.tgz",
      "dist": {
        "shasum": "055d30032b28ede91b68562bdc3e8a17300523a9",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.17.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.17",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.5",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.15": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "766b92d8bf75d9d86f8c8de26d8409ae166f84dd"
      },
      "upmCi": {
        "footprint": "551241c2058eb2378183eaead8dc353001ff425e"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.15",
      "_integrity": "sha512-slHKVQ6KbcCmqn7HZ3CxXGOBaAKWtCaWvNUfbcfZvjZAUa6qo0UfGvnQq9uCj/8VT8bdWj6ocueb/IH0dAth8Q==",
      "_resolved": "/pkgprom/com.unity.addressables-1.19.15.tgz",
      "_from": "file:com.unity.addressables-1.19.15.tgz",
      "dist": {
        "shasum": "73ed430e63c76c08058122c6855b6419fe440f53",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.15.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.15",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.5",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.14": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "2f2f6d64d36d06cfbd51d6f1eae1b0c1cb0ebd48"
      },
      "upmCi": {
        "footprint": "fb23c2acf23b281d0c319b8cf4eaa4bd5fe60255"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.14",
      "_integrity": "sha512-B+DM40GYUQUMggmzHgQebmcG068rc0y2gzBAFKtBU/dyGnPjByQW9FK2QuAGQAYsBSSHTcBVkH17zfwcLyxAdQ==",
      "_resolved": "/pkgprom/com.unity.addressables-1.19.14.tgz",
      "_from": "file:com.unity.addressables-1.19.14.tgz",
      "dist": {
        "shasum": "990433403d2a798bc3fbd125fba0aa7a05d5336b",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.14.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.14",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.4",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.13": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "c1efa1cfd8c5d9fe3dabf5a3f1c124f55a9da3a8"
      },
      "upmCi": {
        "footprint": "034a43f97aed757bba6233814599966361fffaa1"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Custom Build and Playmode Scripts",
          "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
          "path": "Samples~/CustomBuildAndPlaymodeScripts"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.13",
      "_integrity": "sha512-9qd4dm84SLAxOHbjTJjSvBy7XeCExyUuRzGMUA/tyIbm+7XTnmOPEqPFjuGDO5tfZYsJJHjOCCVAsKUg8VCPKA==",
      "_resolved": "/pkgprom/com.unity.addressables-1.19.13.tgz",
      "_from": "file:com.unity.addressables-1.19.13.tgz",
      "dist": {
        "shasum": "4b16dff4edfee069e82f92b5af7597bfae987ff1",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.13.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.13",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.4",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.11": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "461277c23420bea0d6e57f13919a4f40b7efca75"
      },
      "upmCi": {
        "footprint": "26fb878eb2d384ec16e99a5c37c10db52455fe71"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.11",
      "_integrity": "sha512-9/1DouSBVGXPfVXql0z3KgwTrjKQ6XLsrbRWt9OE+y4eM86ECchS9nufsovtGeFFQ1OxrZOwUbXMnn/wXegmww==",
      "_resolved": "/pkgprom/com.unity.addressables-1.19.11.tgz",
      "_from": "file:com.unity.addressables-1.19.11.tgz",
      "dist": {
        "shasum": "e737754867f453030daab332d3a4485e5209c68e",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.11.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.11",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.3",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.18.19": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "eb086c67e6a325f887f087e89a7be9a364fcfe4d"
      },
      "upmCi": {
        "footprint": "53363b22d657faa6828f1177d5a3e9dc17119f61"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.18.19",
      "_integrity": "sha512-WDzPAY2L+4y9ODUoHToXfzt8+J5RxPT3LKIqLpKBGnngxJbhRGFvAYgFqmOt9QaglElwYKuvb8mqOD2doK2vTw==",
      "_resolved": "/pkgprom/com.unity.addressables-1.18.19.tgz",
      "_from": "file:com.unity.addressables-1.18.19.tgz",
      "dist": {
        "shasum": "c0e01b996cadaafb9fcf5e3c09a5f42969e0346e",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.18.19.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.18.19",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.9": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "8c308ac7c6b21457e076d1360a4d07c5d3361316"
      },
      "upmCi": {
        "footprint": "c64a636af6f5dd20230c7fa1c3099e4d88738651"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.9",
      "_integrity": "sha512-uXUU3DbacZUjCcazWBQCeDlByhLF9IGM8otPbOntzUjC/TbFEkslADX6dXweh1eV8gE3M2LhuLn4Lokno2XWUA==",
      "_resolved": "/pkgprom/com.unity.addressables-1.19.9.tgz",
      "_from": "file:com.unity.addressables-1.19.9.tgz",
      "dist": {
        "shasum": "57f2e6501c5d1ec9f63b5765e89245a77b0e8dda",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.9.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.9",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.3",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.18.16": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "99678b63e8460876ddbc65368d04e056df07be1c"
      },
      "upmCi": {
        "footprint": "6e0fc3293832c6289574449b189d5dd72e9826be"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.18.16",
      "_integrity": "sha512-rxuM/Vr2+GP1LANXLVCJmVo3TVdr9xVW9wkQ5yMCdwUSMh+c9D/uHPN4ksOzfD2CMypfgrihoZ5fvfpfUK6ETQ==",
      "_resolved": "/pkgprom/com.unity.addressables-1.18.16.tgz",
      "_from": "file:com.unity.addressables-1.18.16.tgz",
      "dist": {
        "shasum": "52b3ab1dfa77cf83eb2ff7691c4193bf83895df7",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.18.16.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.18.16",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.6": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "c8de39564d96461d0cc19d4a4cac722c6aa379af"
      },
      "upmCi": {
        "footprint": "0763f5cd80478fb5c4f710c68e1654431d5863c1"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_id": "com.unity.addressables@1.19.6",
      "_integrity": "sha512-8ace6yzXNszyAE64Y24hk+eUI+q+2FlzrDJc2MQe+lWXcYNsgSuTU5UrSLvzFU3AvN7nKUfi0qdRl65rMPyWAw==",
      "_resolved": "/pkgprom/com.unity.addressables-1.19.6.tgz",
      "_from": "file:com.unity.addressables-1.19.6.tgz",
      "dist": {
        "shasum": "d96e24b278885b434415ed091854b17a7b1267d9",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.6.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.6",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.19.4": {
      "unity": "2019.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "71d56753f5c75e03620e2e6539b9b74c0493a105"
      },
      "upmCi": {
        "footprint": "1527e7b598325efaba45392f93f7c0f981979073"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.19.4.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.19.4",
      "dist": {
        "shasum": "fc76da3085a718a8990b49e60e73006f0cb6b426",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.19.4.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.19.4",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.18.15": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "a47f367eb3d1a9824c6411750cbbcb8a6b4aabda"
      },
      "upmCi": {
        "footprint": "e2b0f660313e0472439fb54a43cf935f7d069e3a"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.18.15.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.18.15",
      "dist": {
        "shasum": "dd7dcb9630a911708f98023d277428545f55667f",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.18.15.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.18.15",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.18.13": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "81df6d1c19bda49913cb4124a0a58a736bddb760"
      },
      "upmCi": {
        "footprint": "1cd1bd6a7a4fdbcc1453c7c2aa8a982e3b8b3bef"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.18.13.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.18.13",
      "dist": {
        "shasum": "a2411d945b9e67a180134ef27edb382851569cc9",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.18.13.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.18.13",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.18.11": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "89efc9676f93524873726099d5b2dcb803322bb7"
      },
      "upmCi": {
        "footprint": "63f44a12ac7b682878708297d046f1f9a3f754f1"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.18.11",
      "dist": {
        "shasum": "7b19c9597faad9c7f768b69db949e843d066bec4",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.18.11.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.18.11",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.18.9": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "0fc62dc1024e533883dfa7a8485a6a1e6ae99e0a"
      },
      "upmCi": {
        "footprint": "baab8e83bf1f1b32dd3cd9db6da06f4982e19cda"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Import Groups Tool",
          "description": "A tool that imports group assets (for example from a custom package) to the current project.",
          "path": "Samples~/ImportExistingGroup"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.18.9.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.18.9",
      "dist": {
        "shasum": "befc03322aac6d586494a7ffd37ee73833435132",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.18.9.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.18.9",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.19.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.18.4": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "cb4e6f60b4355966681a164019a82d71abbd0524"
      },
      "upmCi": {
        "footprint": "8d9efce387cd5072bfe96fe8672c09cb679438c7"
      },
      "samples": [
        {
          "displayName": "Addressables Utility",
          "description": "This sample contains a set of utility functions for Addressables.",
          "path": "Samples~/AddressablesUtility"
        },
        {
          "displayName": "Disable AssetImport on Build",
          "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
          "path": "Samples~/DisableAssetImportOnBuild"
        },
        {
          "displayName": "Prefab Spawner",
          "description": "A basic script that instantiates and destroys a prefab AssetReference.",
          "path": "Samples~/PrefabSpawner"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.18.4.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.18.4",
      "dist": {
        "shasum": "1dfab49de377d543a448fbcebe562bfcdd91cfa6",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.18.4.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.18.4",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.18.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.18.2": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "25f047e0ae53fa81e049cb1dcd2d83962d7c45d0"
      },
      "upmCi": {
        "footprint": "1cb10afb3f45099a2fd5abdd5e83233d57512dde"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.18.2",
      "dist": {
        "shasum": "c026a12419aadf6d023a2e068e0190dc445c1894",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.18.2.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.18.2",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.18.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.19": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "409be64ae2451fbde6a6e3e6fb1d6b7a1aa9a18c"
      },
      "upmCi": {
        "footprint": "5090b8e50c1c58094e77ec5a07f4552bcfa05ae9"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.19",
      "dist": {
        "shasum": "3604fd2eec8a5540a612a79087bc6ff26114c2e7",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.19.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.19",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.15.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.17.17": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "5f320dbae7f51e878dec68116fcd9c5dc5aa4cbc"
      },
      "upmCi": {
        "footprint": "b6a887fb5f65639abfebacccf789c2b52f96e8e7"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.17.17",
      "dist": {
        "shasum": "1964d1dd96298c6b3be2d6733c8d35512a0b180f",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.17.17.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.17.17",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.17.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.8": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "defa3df5b741534bf61c24efd27085fb9371dc49"
      },
      "upmCi": {
        "footprint": "f4e4e785f695a55b72fc9671784d3c363e317d1b"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.16.8.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.8",
      "dist": {
        "shasum": "921221916922bea8c0fabe2328bbd371e22205d5",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.8.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.8",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.14.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.17.15": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "d0430a1aeb7ee2d50d51fbb97b4cd71bf8ae5f26"
      },
      "upmCi": {
        "footprint": "019bb8103921f5098011d91d53303c36e33ae64e"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.17.15.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.17.15",
      "dist": {
        "shasum": "3bb093bdff01d0a3f4a085072f612bc33239ac72",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.17.15.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.17.15",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.17.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.17.13": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "cb0ee07235216ca0a1a1acd97c28c75395545582"
      },
      "upmCi": {
        "footprint": "609bd5ae506a26b71aa65cc109d3da4d53aa40fe"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.17.13",
      "dist": {
        "shasum": "17b5a59a6b8222edcd7d1bdbfb47d19f53e245b0",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.17.13.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.17.13",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.17.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.17.6-preview": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "fa4cd10490da61cfec184f2459296d15c58cf700"
      },
      "upmCi": {
        "footprint": "858dec334c0249f672ea89cac43e598beade3c01"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.17.6-preview.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.17.6-preview",
      "dist": {
        "shasum": "707fe57c09e1b30e7f3ab8fe286cb2c6296ca99c",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.17.6-preview.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.17.6-preview",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.16.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.17.5-preview": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "a470170b08a0bd5491c93a3784bcfe0ae73c4e0b"
      },
      "upmCi": {
        "footprint": "7c92ced92f46f1a184e431971e901a0a066f70a3"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.17.5-preview.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.17.5-preview",
      "dist": {
        "shasum": "66d8f7fd30702f04bb9c600446c688d0451e7843",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.17.5-preview.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.17.5-preview",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.16.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.17.4-preview": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "e6279a32e13b388a0a9aa7826f7cb163b36eddef"
      },
      "upmCi": {
        "footprint": "4c08818343b1e7e50ac783bd304e353f92a54849"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.17.4-preview.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.17.4-preview",
      "dist": {
        "shasum": "cd5dd40ede9e4c96d8495534f3b872753d005fc7",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.17.4-preview.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.17.4-preview",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.16.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.imageconversion": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.16": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "c238142d6dd78f465fa645cb6b4671ab3472ec99"
      },
      "upmCi": {
        "footprint": "86de4a0cb6b2b8d4652802e07f1c5b0bea2d0426"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.16",
      "dist": {
        "shasum": "0467c6349725809c65b5db0f48aeb8ccec9a8be9",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.16.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.16",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.15.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.17.2-preview": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "59c035bef2a9201c356e1ed5123dbd6b701c095b"
      },
      "upmCi": {
        "footprint": "abd6e6254784bd14eff2bf2091644b22529c1bea"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.17.2-preview.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.17.2-preview",
      "dist": {
        "shasum": "b4bb029370d323465f69cd2bbfe7b640b6fae01e",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.17.2-preview.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.17.2-preview",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.15.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.17.0-preview": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "365d1897ee49cd15c1844bb93c11936b375a8d18"
      },
      "upmCi": {
        "footprint": "5ab4b49bd63f007f16dc8099be1f8a8df1056534"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.17.0-preview.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.17.0-preview",
      "dist": {
        "shasum": "52006e0af4f788f9e681234bf6f8cefab70878b8",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.17.0-preview.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.17.0-preview",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.15.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.15": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "e42d3d65414a380a92d7829ee38148563d0908a8"
      },
      "upmCi": {
        "footprint": "11bd74498ed2da478077194f72b0b430bc78b9de"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.15",
      "dist": {
        "shasum": "6af1b826efbc8c41bb21f548b5fcd3fc9b935d20",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.15.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.15",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.15.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.13": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "d38e498c671748234e0b11e7e42e8fd4fdb3f6c9"
      },
      "upmCi": {
        "footprint": "2ef17e7919cd9f882bef5e686101ebb8316886df"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.13",
      "dist": {
        "shasum": "c8e633f95d967623587c92a99816bd763558c21d",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.13.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.13",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.15.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.12": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "5e701abc405eb6c86690891bffc4c0abb1244cae"
      },
      "upmCi": {
        "footprint": "f736eb3cb6ffb2be6ae5b391738de27571396585"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.12",
      "dist": {
        "shasum": "213c005bbcb54a30299c1f5cd221c5b4981468f1",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.12.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.12",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.15.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.10": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "77a8e2e3bc47fd22d4f773d5b949d92bffda3036"
      },
      "upmCi": {
        "footprint": "265c8a7c2b92b9fae98023d02fada514b985b093"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.10",
      "dist": {
        "shasum": "3e2d010286ac76206b9ae8be81667365cc02f49c",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.10.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.10",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.14.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.7": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "91e25bfd2631ef0d729a689d95c0eed344dea37f"
      },
      "upmCi": {
        "footprint": "209337fd0fef2f8169885004ebb9b1cf75295a6a"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.7",
      "dist": {
        "shasum": "c70a25797396ec26243a7ff25cb9362dec4deb2a",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.7.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.7",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.14.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.6": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "6683c498ceaf2082b74aab30f4088476204bdfd6"
      },
      "upmCi": {
        "footprint": "0e410c520bb21ce00b45bd0dc9b6686406105815"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.6",
      "dist": {
        "shasum": "eacf9996cc735b9a0a68e5c61713de9c9635795f",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.6.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.6",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.13.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.16.1": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "c3157c20443b8af66c20503f38d5c66726e7e17e"
      },
      "upmCi": {
        "footprint": "c76c8f694a6d3842848d0f23e4f9b71fca2ca580"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.16.1",
      "dist": {
        "shasum": "76979d2e6ff93a908c904143d9873913f16e3a12",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.16.1.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.16.1",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.12.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.8.5": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "e7aa76a8b30a3b25e597bf2b40dd1b82e1bef3a0"
      },
      "upmCi": {
        "footprint": "1829e5ae3f45a323d119d4d68d6f0e36cef08aad"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.8.5",
      "dist": {
        "shasum": "1998da59f051f35a1d024f7530551c7fbd74d9d8",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.8.5.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.8.5",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.7.3",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.15.1": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "d489cd6c3b2725bf10d7d2e7b9a77d2100225fcb"
      },
      "upmCi": {
        "footprint": "6250c322b3963d614660908729f4cf5b3d9b3928"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.15.1",
      "dist": {
        "shasum": "b30d7680ffcc2d6a2059259e6180e0f88c1b9c1b",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.15.1.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.15.1",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.11.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.14.2": {
      "unity": "2018.4",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "c2b406223598e6f2ea290dbeff4f468ba70f5b75"
      },
      "upmCi": {
        "footprint": "6e6dacc5d5d459555845b7f394c37c4dc46e3c5c"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.14.2",
      "dist": {
        "shasum": "64ca39f87310df0f68bdef23183390f5138a324e",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.14.2.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.14.2",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.11.1",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.13.1": {
      "unity": "2018.3",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "8c9978278764fc053bed0af253168c273c823f77"
      },
      "upmCi": {
        "footprint": "1de513cb2bee7d0a4ff6db56e7be13cc0971fee4"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.13.1",
      "dist": {
        "shasum": "796a60d7aa37a78cbb9031297e8059e15af41a93",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.13.1.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.13.1",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.10.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.12.0": {
      "unity": "2018.3",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "0f3c95e53798715c3c8df247ec6b919dfe5d2cf0"
      },
      "upmCi": {
        "footprint": "5b512e0bbdca10b26b88c93728430a880e9730f1"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.12.0",
      "dist": {
        "shasum": "be19be0ad2e3a11d44a2e882d94abed3822a710d",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.12.0.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.12.0",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.9.0",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.11.2": {
      "unity": "2018.3",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "05119ebff0b2cfd0f79afc5025d7c3b74e287579"
      },
      "upmCi": {
        "footprint": "add893eaae4d7b7705a5ad1d23c847e4219c3847"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.11.2",
      "dist": {
        "shasum": "6e41fd98aded379cbfe09530491c690db5717316",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.11.2.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.11.2",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.8.6",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.10.0": {
      "unity": "2018.3",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "5ef79b707b963766b28b0b028e909d022eb26274"
      },
      "upmCi": {
        "footprint": "a5300a7c2c6c8b46de75165336150a6a07049360"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.10.0",
      "dist": {
        "shasum": "d5492e109b121538af01684df631f99353eaf0ad",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.10.0.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.10.0",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.8.4",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.9.2": {
      "unity": "2018.3",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "7ab038b45d6b25f68457d46946b1e9d02a365de3"
      },
      "upmCi": {
        "footprint": "15fae7ad84e5985673b12180e8199ec60056ac0d"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.addressables-1.9.2.tgz",
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.9.2",
      "dist": {
        "shasum": "845e13d1b80452ed35cbe0735289879e6e0bfbe1",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.9.2.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.9.2",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.8.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.8.4": {
      "unity": "2018.3",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "type": "git",
        "revision": "32be1f5874dbeb19b42f7e6d58f432437c6279f5"
      },
      "upmCi": {
        "footprint": "bb5f9496100b84629fb924e48d1d51dddb8ccf6c"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.8.4",
      "dist": {
        "shasum": "bf595f8acf8a26ad65e31cc187749d45204ca353",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.8.4.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.8.4",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.7.3",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.8.3": {
      "unity": "2018.3",
      "repository": {
        "footprint": "bc00d5290a1468ed6479f8289db7459a1cd3c1b9",
        "type": "git",
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "revision": "7eaa175b8ede5d98238b85480077b0eef270ce1a"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.8.3",
      "_shasum": "0c3c8dbe596414091d9896e924257cbb3020607e",
      "_resolved": "file:../../../var/folders/tn/t8btbstx12l33r08ww_2c0_1_q91g9/T/com.unity.addressables-1.8.3.tgz",
      "_from": "../../../var/folders/tn/t8btbstx12l33r08ww_2c0_1_q91g9/T/com.unity.addressables-1.8.3.tgz",
      "scripts": {},
      "dist": {
        "shasum": "0c3c8dbe596414091d9896e924257cbb3020607e",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.8.3.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.8.3",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.7.2",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.7.5": {
      "unity": "2018.3",
      "repository": {
        "footprint": "382877549255ff1bb84c7a63dfa184607a58ecc6",
        "type": "git",
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "revision": "b0aa62836dd7b7afe2b514bcfd135d23fd914cfb"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.7.5",
      "_shasum": "c49a354135c155ef32d2b22db720852344a7f5c4",
      "_resolved": "file:../../../var/folders/tn/t8btbstx12l33r08ww_2c0_1_q91g9/T/com.unity.addressables-1.7.5.tgz",
      "_from": "../../../var/folders/tn/t8btbstx12l33r08ww_2c0_1_q91g9/T/com.unity.addressables-1.7.5.tgz",
      "scripts": {},
      "dist": {
        "shasum": "c49a354135c155ef32d2b22db720852344a7f5c4",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.7.5.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.7.5",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.10",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.7.4": {
      "unity": "2018.3",
      "repository": {
        "footprint": "7621fd6602d732619b87ecb064501866a8a9d39c",
        "type": "git",
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "revision": "6b79f542cec417e4c7933137d0beb0e673774646"
      },
      "readmeFilename": "readme.md",
      "_id": "com.unity.addressables@1.7.4",
      "_shasum": "21ac3635f5e5335120014de7379dc3728b952100",
      "_resolved": "file:..\\..\\..\\..\\MIKE~1.ADK\\AppData\\Local\\Temp\\com.unity.addressables-1.7.4.tgz",
      "_from": "..\\..\\..\\..\\MIKE~1.ADK\\AppData\\Local\\Temp\\com.unity.addressables-1.7.4.tgz",
      "scripts": {},
      "dist": {
        "shasum": "21ac3635f5e5335120014de7379dc3728b952100",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.7.4.tgz"
      },
      "name": "com.unity.addressables",
      "version": "1.7.4",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.10",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.6.2": {
      "repository": {
        "footprint": "e00f61f75d44a6746f052f5b1ba253af255ff3c9",
        "type": "git",
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "revision": "1f5bd9d45173a63526bc4c2f70fab4fe883d74c5"
      },
      "dist": {
        "shasum": "8138c7a990ba357719c4cb20f2d544b89f6df4e3",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.6.2.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.6.2",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.6.2",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.6",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.6.0": {
      "repository": {
        "footprint": "63af97e1d2d78e52cfa3c07ba278b45728c108ed",
        "type": "git",
        "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
        "revision": "0b920f41b1ec24735ff82ec5e414ac6339b65296"
      },
      "dist": {
        "shasum": "39df9673600119b7280f8a782a34e75b844c7e50",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.6.0.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.6.0",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.6.0",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.4",
        "com.unity.modules.assetbundle": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.unitywebrequestassetbundle": "1.0.0"
      }
    },
    "1.5.1": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "f7230cfe7a5e49d8efc06db190eb8673864d1082"
      },
      "dist": {
        "shasum": "4a0563ddd4199effafdd4747077a621e0b877207",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.5.1.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.5.1",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.5.1",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.4"
      }
    },
    "1.5.0": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "e1eb70460c13dd924688cf59d3e091561d3c1001"
      },
      "dist": {
        "shasum": "12f9b503040807f23e92e12899f0506f828be91a",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.5.0.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.5.0",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.5.0",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "category": "",
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.4"
      }
    },
    "1.4.0": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "a17b7dbaf4146595c7fa3d90601807feda436221"
      },
      "dist": {
        "shasum": "f3ff96a40c3378ba0f3e95f796e60fcf7877a932",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.4.0.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.4.0",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.4.0",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.4"
      }
    },
    "1.3.8": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "e439c082f502c43ce435ea315259105818ae3d28"
      },
      "dist": {
        "shasum": "91bdbec0373bfbb97691527daccd3821ed2ec7da",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.3.8.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.3.8",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.3.8",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.4"
      }
    },
    "1.3.3": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "ba9dedd8823080f4c4bd88f385e833882d49fa66"
      },
      "dist": {
        "shasum": "8afe5b0ea968e0ff9b77668314a039b69053c353",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.3.3.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.3.3",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.3.3",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.4"
      }
    },
    "1.2.4": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "7409c2096a07e8bd064c9f96e68b91346aabd385"
      },
      "dist": {
        "shasum": "d304ae0acd2a84894e0d77d4cd79c54dc25db422",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.2.4.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.2.4",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.2.4",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.2"
      }
    },
    "1.2.3": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "b9a84db1d51b1913d194119d054ec992b0cc07be"
      },
      "dist": {
        "shasum": "2a7065842444b54583ae236965e0d7fffe29d9b7",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.2.3.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.2.3",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.2.3",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.2"
      }
    },
    "1.2.2": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "000360c836ebe487f5ce7d1a75428f08d28b0d6d"
      },
      "dist": {
        "shasum": "90edb651adca562627ab23494a800bba942f5046",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.2.2.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.2.2",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.2.2",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.2"
      }
    },
    "1.1.10": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "feeab367b101a12d5a04960d0d9b20b267c5726d"
      },
      "dist": {
        "shasum": "ab10d089412e80efd6a832cde66092154f417842",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.1.10.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.1.10",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.1.10",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.2"
      }
    },
    "1.1.9": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "c70f6073684c7fb939e79fb88ff1d10697698184"
      },
      "dist": {
        "shasum": "076352e4df833f351ae89482a8920c0d6a5e881e",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.1.9.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.1.9",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.1.9",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.2"
      }
    },
    "1.1.7": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "b1a22897bc31191296b79d35326fae1bcf7b9ef1"
      },
      "dist": {
        "shasum": "70d1c97593c7b74e98d155570a169af44858ede5",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.1.7.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.1.7",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.1.7",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.2"
      }
    },
    "1.1.5": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "b76a987946490d87202d74272f097d8e0cc858ba"
      },
      "dist": {
        "shasum": "6f27b710e18f735f5f127b619245700140dd0135",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.1.5.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.1.5",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.1.5",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.1"
      }
    },
    "1.1.4-preview": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "56c089b5af3365306e2d136d00259872bfbf0d1f"
      },
      "dist": {
        "shasum": "3d0996f3207bc2f07e94aa796cdfa4be9e60a87a",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.1.4-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.1.4-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.1.4-preview",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.0-preview"
      }
    },
    "1.1.3-preview": {
      "repository": {
        "type": "git",
        "url": "git@github.cds.internal.unity3d.com:unity/Addressables.git",
        "revision": "0ea6de302fcee7da30dec7f8fbe7ec957d913882"
      },
      "dist": {
        "shasum": "5ff88b22def90cca2bd56dae0b42ed9d6c695b43",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-1.1.3-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@1.1.3-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "1.1.3-preview",
      "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.5.0-preview"
      }
    },
    "0.8.6-preview": {
      "repository": {
        "type": "git",
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/build-pipeline/addressablesdemo",
        "revision": "16d79edba5c00baa36ba6e413294cd9d05bee5f1 "
      },
      "dist": {
        "shasum": "0adc5ad816889f0490b26e36b5d615abff571267",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.8.6-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@0.8.6-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "0.8.6-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.4.1-preview"
      }
    },
    "0.8.4-preview": {
      "repository": {
        "type": "git",
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/build-pipeline/addressablesdemo",
        "revision": "16d79edba5c00baa36ba6e413294cd9d05bee5f1 "
      },
      "dist": {
        "shasum": "66a612cc4bf49da5ecf370ee84757649e1f694ac",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.8.4-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@0.8.4-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "0.8.4-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.4.1-preview"
      }
    },
    "0.7.5-preview": {
      "repository": {
        "type": "git",
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/build-pipeline/addressablesdemo",
        "revision": "16d79edba5c00baa36ba6e413294cd9d05bee5f1 "
      },
      "dist": {
        "shasum": "08fdae62536399a19eaf367024fcd8191f060927",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.7.5-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@0.7.5-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "0.7.5-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.4.1-preview"
      }
    },
    "0.7.4-preview": {
      "repository": {
        "type": "git",
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/build-pipeline/addressablesdemo",
        "revision": "16d79edba5c00baa36ba6e413294cd9d05bee5f1 "
      },
      "dist": {
        "shasum": "eb56841bdb2153d27bcb3065ce1897f95a991568",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.7.4-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@0.7.4-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "0.7.4-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.4.1-preview"
      }
    },
    "0.6.8-preview": {
      "repository": {
        "type": "git",
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/build-pipeline/addressablesdemo",
        "revision": "cd07c81338ccbe806a1992361b1fec26f7d885fa"
      },
      "dist": {
        "shasum": "fe59b0f3305d0400188353c63f4863a3d648689c",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.6.8-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@0.6.8-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "0.6.8-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.3.5-preview"
      }
    },
    "0.6.7-preview": {
      "repository": {
        "type": "git",
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/build-pipeline/addressablesdemo",
        "revision": "51073e11db2a0f1efe74ac21e9252b4147bf06bb"
      },
      "dist": {
        "shasum": "19115d89d97da8aef13de21edfbd87b7aa95bcb2",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.6.7-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@0.6.7-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "0.6.7-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.3.5-preview"
      }
    },
    "0.6.6-preview": {
      "repository": {
        "type": "git",
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/build-pipeline/addressablesdemo",
        "revision": "477ed9d3401c23106d7c1060c24b30abefe61f6b"
      },
      "dist": {
        "shasum": "38a34cc44c1cc1a275112f22a3113d06a1f6c782",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.6.6-preview.tgz"
      },
      "scripts": {},
      "_id": "com.unity.addressables@0.6.6-preview",
      "unity": "2018.3",
      "name": "com.unity.addressables",
      "version": "0.6.6-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.scriptablebuildpipeline": "1.3.5-preview"
      }
    },
    "0.5.3-preview": {
      "dist": {
        "shasum": "1424bad96271be8611341898a155e52505357243",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.5.3-preview.tgz"
      },
      "_id": "com.unity.addressables@0.5.3-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.5.3-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.4.4-preview",
        "com.unity.scriptablebuildpipeline": "1.2.1-preview"
      }
    },
    "0.5.2-preview": {
      "dist": {
        "shasum": "2e71767b7c1b2c0ccc02278a3aea9c994efdc209",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.5.2-preview.tgz"
      },
      "_id": "com.unity.addressables@0.5.2-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.5.2-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.4.4-preview",
        "com.unity.scriptablebuildpipeline": "1.2.1-preview"
      }
    },
    "0.4.8-preview": {
      "dist": {
        "shasum": "494d6edf676b25b13533442b605fe51b5f49298e",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.4.8-preview.tgz"
      },
      "_id": "com.unity.addressables@0.4.8-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.4.8-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.4.2-preview",
        "com.unity.scriptablebuildpipeline": "1.1.1-preview"
      }
    },
    "0.4.6-preview": {
      "dist": {
        "shasum": "ff7d02508a794c18a4fd217607efd5c8cf2e061f",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.4.6-preview.tgz"
      },
      "_id": "com.unity.addressables@0.4.6-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.4.6-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.4.1-preview",
        "com.unity.scriptablebuildpipeline": "1.1.0-preview"
      }
    },
    "0.3.5-preview": {
      "dist": {
        "shasum": "33b67d2f4c5218ef8e223f24992c3a80ddea87a6",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.3.5-preview.tgz"
      },
      "_id": "com.unity.addressables@0.3.5-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.3.5-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.3.0-preview",
        "com.unity.scriptablebuildpipeline": "1.0.1-preview"
      }
    },
    "0.2.2-preview": {
      "dist": {
        "shasum": "dae94f9d3ad9ab30e8357c1a77ccdd9c41db007a",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.2.2-preview.tgz"
      },
      "_id": "com.unity.addressables@0.2.2-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.2.2-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.2.0-preview",
        "com.unity.scriptablebuildpipeline": "0.2.0-preview"
      }
    },
    "0.2.1-preview": {
      "dist": {
        "shasum": "c598c152e8d8d3979128af329b675c72bb3c087b",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.2.1-preview.tgz"
      },
      "_id": "com.unity.addressables@0.2.1-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.2.1-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.2.0-preview",
        "com.unity.scriptablebuildpipeline": "0.2.0-preview"
      }
    },
    "0.1.2-preview": {
      "dist": {
        "shasum": "a4cf71d6ea4ba1952b459de2f52a4120fe77442d",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.1.2-preview.tgz"
      },
      "_id": "com.unity.addressables@0.1.2-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.1.2-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.1.0-preview",
        "com.unity.scriptablebuildpipeline": "0.1.0-preview"
      }
    },
    "0.0.27-preview": {
      "dist": {
        "shasum": "6cc9f2775e3b22b28e236d2d16a5ed1bbec7d974",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.0.27-preview.tgz"
      },
      "_id": "com.unity.addressables@0.0.27-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.0.27-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.0.17-preview",
        "com.unity.scriptablebuildpipeline": "0.0.15-preview"
      }
    },
    "0.0.26-preview": {
      "dist": {
        "shasum": "cf4bd43ce86dc3c31e366eeb95a383e6b62cb15a",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.0.26-preview.tgz"
      },
      "_id": "com.unity.addressables@0.0.26-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.0.26-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.0.17-preview",
        "com.unity.scriptablebuildpipeline": "0.0.15-preview"
      }
    },
    "0.0.22-preview": {
      "dist": {
        "shasum": "10f90a62ed1bdb6450dc0da4635097601e8974f5",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.0.22-preview.tgz"
      },
      "_id": "com.unity.addressables@0.0.22-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.0.22-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.0.16-preview",
        "com.unity.scriptablebuildpipeline": "0.0.14-preview"
      }
    },
    "0.0.18-preview": {
      "dist": {
        "shasum": "0a0e1a1d050751469c7623aeb287b508b6194b9a",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.0.18-preview.tgz"
      },
      "_id": "com.unity.addressables@0.0.18-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.0.18-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.0.15-preview",
        "com.unity.scriptablebuildpipeline": "0.0.9-preview"
      }
    },
    "0.0.16-preview": {
      "dist": {
        "shasum": "861496d7c9b2751b2fc0c9f3152debf65aaae266",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.0.16-preview.tgz"
      },
      "_id": "com.unity.addressables@0.0.16-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.0.16-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.0.13-preview",
        "com.unity.scriptablebuildpipeline": "0.0.9-preview"
      }
    },
    "0.0.15-preview": {
      "dist": {
        "shasum": "c46f260df269ccdde4ab0a5dbcdce2d92339f4ce",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.0.15-preview.tgz"
      },
      "_id": "com.unity.addressables@0.0.15-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.0.15-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.0.12-preview",
        "com.unity.scriptablebuildpipeline": "0.0.8-preview"
      }
    },
    "0.0.12-preview": {
      "dist": {
        "shasum": "ecfd39f8d23001b579d6081335f8b8c85da9863b",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.0.12-preview.tgz"
      },
      "_id": "com.unity.addressables@0.0.12-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.0.12-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.0.9-preview",
        "com.unity.scriptablebuildpipeline": "0.0.6-preview"
      }
    },
    "0.0.8-preview": {
      "dist": {
        "shasum": "bcc4d9244399c2b29c8c0fe59d1c11faa6ab30b2",
        "tarball": "https://download.packages.unity.com/com.unity.addressables/-/com.unity.addressables-0.0.8-preview.tgz"
      },
      "_id": "com.unity.addressables@0.0.8-preview",
      "unity": "2018.2",
      "name": "com.unity.addressables",
      "version": "0.0.8-preview",
      "description": "Our new Addressable Asset System allows the developer to ask for an asset via its address and get back the thing that resides at that address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nThe Addressable Asset System uses asynchronous loading to support loading from any location with any collection of dependencies. Whether you are using direct references, traditional asset bundles, or Resource folders, addressable assets provide a simpler way to make your game more dynamic. The Addressable Asset System  simultaneously opens up the world of asset bundles while managing all the complexity.",
      "displayName": "Addressables System",
      "keywords": [
        "asset",
        "resources",
        "bundle",
        "bundles",
        "assetbundles"
      ],
      "dependencies": {
        "com.unity.resourcemanager": "2.0.6-preview",
        "com.unity.scriptablebuildpipeline": "0.0.5-preview"
      }
    }
  },
  "etag": "\"67f9e3b58f58155cdd3af43d9ec10a7b\"",
  "time": {
    "1.21.12": "2023-05-10T09:16:19Z",
    "1.21.10": "2023-04-11T14:31:44Z",
    "1.21.9": "2023-03-14T08:24:59Z",
    "1.21.8": "2023-02-17T21:40:02Z",
    "1.21.3": "2023-02-17T09:05:43Z",
    "1.21.2": "2022-12-21T16:24:55Z",
    "1.21.1": "2022-10-25T02:23:44Z",
    "1.20.5": "2022-08-12T08:45:22Z",
    "1.20.3": "2022-06-24T10:47:06Z",
    "1.20.0": "2022-05-04T18:48:33Z",
    "1.19.19": "2022-03-04T10:07:07Z",
    "1.19.18": "2022-02-10T05:05:42Z",
    "1.19.17": "2022-01-10T15:55:12Z",
    "1.19.15": "2021-12-21T11:31:39Z",
    "1.19.14": "2021-12-09T17:45:32Z",
    "1.19.13": "2021-12-02T11:04:20Z",
    "1.19.11": "2021-10-28T16:00:20Z",
    "1.18.19": "2021-10-22T09:43:12Z",
    "1.19.9": "2021-10-11T17:25:25Z",
    "1.18.16": "2021-09-30T10:24:44Z",
    "1.19.6": "2021-09-29T10:13:56Z",
    "1.19.4": "2021-09-02T11:05:17Z",
    "1.18.15": "2021-08-03T12:55:40Z",
    "1.18.13": "2021-07-20T16:11:03Z",
    "1.18.11": "2021-06-30T15:36:22Z",
    "1.18.9": "2021-06-08T01:07:55Z",
    "1.18.4": "2021-05-11T19:34:13Z",
    "1.18.2": "2021-04-30T13:07:45Z",
    "1.16.19": "2021-04-15T19:45:30Z",
    "1.17.17": "2021-04-13T17:46:46Z",
    "1.16.8": "2021-03-29T19:03:01Z",
    "1.17.15": "2021-03-29T19:02:40Z",
    "1.17.13": "2021-03-19T12:59:57Z",
    "1.17.6-preview": "2021-02-25T19:40:01Z",
    "1.17.5-preview": "2021-02-11T21:10:00Z",
    "1.17.4-preview": "2021-01-28T20:44:49Z",
    "1.16.16": "2021-01-27T00:59:17Z",
    "1.17.2-preview": "2021-01-15T20:51:41Z",
    "1.17.0-preview": "2020-12-16T22:12:54Z",
    "1.16.15": "2020-12-02T20:20:18Z",
    "1.16.13": "2020-11-24T17:29:15Z",
    "1.16.12": "2020-11-20T16:04:55Z",
    "1.16.10": "2020-11-12T18:39:00Z",
    "1.16.7": "2020-10-22T15:58:46Z",
    "1.16.6": "2020-10-13T16:28:23Z",
    "1.16.1": "2020-09-22T16:46:37Z",
    "1.8.5": "2020-09-01T13:41:28Z",
    "1.15.1": "2020-08-27T19:24:52Z",
    "1.14.2": "2020-08-18T15:29:34Z",
    "1.13.1": "2020-07-30T13:14:38Z",
    "1.12.0": "2020-07-15T18:15:35Z",
    "1.11.2": "2020-06-29T10:26:24Z",
    "1.10.0": "2020-06-08T20:14:44Z",
    "1.9.2": "2020-05-28T19:36:06Z",
    "1.8.4": "2020-05-25T15:44:12Z",
    "1.8.3": "2020-04-20T19:29:21Z",
    "1.7.5": "2020-03-30T15:37:28Z",
    "1.7.4": "2020-03-19T15:39:49Z",
    "1.6.2": "2020-02-13T23:00:38Z",
    "1.6.0": "2020-01-28T12:01:52Z",
    "1.5.1": "2020-01-15T19:00:53Z",
    "1.5.0": "2019-12-16T17:01:02Z",
    "1.4.0": "2019-11-22T19:00:42Z",
    "1.3.8": "2019-11-08T03:00:50Z",
    "1.3.3": "2019-10-31T17:00:41Z",
    "1.2.4": "2019-09-18T18:00:34Z",
    "1.2.3": "2019-09-13T01:45:58Z",
    "1.2.2": "2019-09-10T21:00:38Z",
    "1.1.10": "2019-08-29T22:00:34Z",
    "1.1.9": "2019-08-22T21:00:33Z",
    "1.1.7": "2019-08-02T16:00:41Z",
    "1.1.5": "2019-07-17T21:00:32Z",
    "1.1.4-preview": "2019-06-20T00:00:24Z",
    "1.1.3-preview": "2019-06-18T20:00:23Z",
    "0.8.6-preview": "2019-05-15T17:00:20Z",
    "0.8.4-preview": "2019-05-10T15:00:28Z",
    "0.7.5-preview": "2019-04-29T17:00:22Z",
    "0.7.4-preview": "2019-04-22T21:00:23Z",
    "0.6.8-preview": "2019-04-03T11:44:15Z",
    "0.6.7-preview": "2019-04-03T11:44:13Z",
    "0.6.6-preview": "2019-04-03T11:44:10Z",
    "0.5.3-preview": "2019-04-03T11:44:07Z",
    "0.5.2-preview": "2019-04-03T11:44:04Z",
    "0.4.8-preview": "2019-04-03T11:44:01Z",
    "0.4.6-preview": "2019-04-03T11:43:58Z",
    "0.3.5-preview": "2019-04-03T11:43:55Z",
    "0.2.2-preview": "2019-04-03T11:43:53Z",
    "0.2.1-preview": "2019-04-03T11:43:50Z",
    "0.1.2-preview": "2019-04-03T11:43:47Z",
    "0.0.27-preview": "2019-04-03T11:43:44Z",
    "0.0.26-preview": "2019-04-03T11:43:42Z",
    "0.0.22-preview": "2019-04-03T11:43:39Z",
    "0.0.18-preview": "2019-04-03T11:43:37Z",
    "0.0.16-preview": "2019-04-03T11:43:34Z",
    "0.0.15-preview": "2019-04-03T11:43:32Z",
    "0.0.12-preview": "2019-04-03T11:43:29Z",
    "0.0.8-preview": "2019-04-03T11:43:26Z"
  }
}
