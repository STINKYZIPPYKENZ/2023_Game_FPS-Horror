{
  "_id": "com.unity.purchasing",
  "name": "com.unity.purchasing",
  "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
  "provider": "upm",
  "category": "",
  "dist-tags": {
    "latest": "4.9.3"
  },
  "versions": {
    "4.9.3": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Changed\n- Analytics events are now sent when a purchase has been confirmed (`ConfirmPendingTransaction` or `ProcessPurchase` returning `PurchaseProcessingResult.Complete`). This will improve the accuracy of revenue tracking by no longer considering pending purchases.\n- Updated `Product.transactionID`, `Product.hasReceipt` and `Product.receipt` documentation to include pending transaction use cases.\n- Updated samples to use `IDetailedStoreListener` and its improved `OnPurchaseFailed` callback.\n- Added a new `RefreshAppReceipt(Action<string> successCallback, Action<string> errorCallback)` callback containing more information when the errorCallback is invoked in `IAppleExtensions : IStoreListener`.\n\n### Fixed\n- `OnPurchaseFailed` will no longer log an error when there's only new IAP Buttons with no IAP Listener.\n- Apple - Improved the accuracy of `Product.appleProductIsRestored` when using the restore transaction button. These will now correctly be flagged as true.\n- Codeless - `OnPurchaseFailed(Product, PurchaseFailureDescription)` callback was not invoked in `IAP Listener`"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.9.3"
      },
      "upmCi": {
        "footprint": "91415d00952a4a457502d551566c21f547eef3d5"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.9/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "42718bbbc4b238be117b2c0c72c843152dffec63"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "93f5f173cccb99d762f96f738f3ab02981f8df05",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.9.3.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.9.3",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "assets",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.1"
      }
    },
    "4.9.2": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Changed\n- Analytics events are now sent when a purchase has been confirmed (`ConfirmPendingTransaction` or `ProcessPurchase` returning `PurchaseProcessingResult.Complete`). This will improve the accuracy of revenue tracking by no longer considering pending purchases.\n- Updated `Product.transactionID`, `Product.hasReceipt` and `Product.receipt` documentation to include pending transaction use cases.\n- Updated samples to use `IDetailedStoreListener` and its improved `OnPurchaseFailed` callback.\n- Added a new `RefreshAppReceipt(Action<string> successCallback, Action<string> errorCallback)` callback containing more information when the errorCallback is invoked in `IAppleExtensions : IStoreListener`.\n\n### Fixed\n- `OnPurchaseFailed` will no longer log an error when there's only new IAP Buttons with no IAP Listener.\n- Apple - Improved the accuracy of `Product.appleProductIsRestored` when using the restore transaction button. These will now correctly be flagged as true.\n- Codeless - `OnPurchaseFailed(Product, PurchaseFailureDescription)` callback was not invoked in `IAP Listener`"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.9.2"
      },
      "upmCi": {
        "footprint": "0c244d8f75e60206f34c5ba7328d9a5c93566401"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.9/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "e15bdead21c96f6cbb6cf3592b6d2caaf0fa80b0"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "eb0d8b374954c3a113378e5a2d1ce95242812ba3",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.9.2.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.9.2",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "assets",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.1"
      }
    },
    "4.8.0": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- Added new [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/CodelessIAPButton.html) in the editor. This new button allows for more UI customization.  The new button will no longer update the button fields by default.\n- Added a new event `OnProductFetched(Product)` to the [IAP Listener](https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/IAPListener.html) and to the [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/CodelessIAPButton.html) it is called after fetching products from the app stores.\n- Added a new `OnPurchaseFailed(Product, PurchaseFailureDescription)` callback containing more information on the failed purchase in `IDetailedStoreListener : IStoreListener`\n\n### Changed\n- [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/IAPButton.html) is now obsolete.\n- Google Play - Billing Library update from version 4.0.0 to 5.1.0 [Google Release Notes](https://developer.android.com/google/play/billing/release-notes).\n    New Google Billing features are not supported yet, they will be included in a future major update.\n- Removed the nullable operator `?` from public interfaces and classes.\n- `IStoreListener.OnPurchaseFailed` is now obsolete.\n- When present, Analytics 4.4.0 and above will now use the new interface `IAnalyticsStandardEventComponent` from Services Cores 1.8.1.\n- Upgraded `com.unity.services.core` from 1.5.2 to 1.8.1.\n\n### Fixed\n- Samples - Some samples had IAP 4.6.0 `IStoreListener` changes not completely implemented causing compilation errors."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.8.0"
      },
      "upmCi": {
        "footprint": "39a81f23b11eb69a6d62e7d019d33fcaf7c35c46"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "764a3bd5b373bbdb7bbd3a87a2b260204d2b1365"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "74ff9a8b836b10b566d4eaecaf1db17bee303ffb",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.8.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.8.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.1"
      }
    },
    "4.7.0": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- Added `storeSpecificErrorCode` to `PurchaseFailureDescription.message` when available.\n\n### Fixed\n- Unity IAP will consider the call to `UnityPurchasing.initialize` completed before invoking the correct callback `IStoreListener.OnInitialized` or `IStoreListener.OnInitializeFailed`. This prevents these callbacks from being invoked more than once per initialization.\n- GooglePlay - Fixed `No such proxy method` exception in our representation of `BillingClientStateListener.onBillingServiceDisconnected()` introduced by Unity IAP 4.6.0\n- Apple - Fixed a `NullReferenceException` happening when the receipt isn't found.\n\n### Changed\n- Removed `com.unity.services.analytics` from the IAP SDK dependencies"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.7.0"
      },
      "upmCi": {
        "footprint": "ed2d83ca5c36a9191372ae3683b492f6d069bda0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.7/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "5060daf07dab02e284541921b99c4e01e2673503"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "63a69bf634cfca3bd99cc000e043dcff09eac24c",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.7.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.7.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.5.2"
      }
    },
    "4.6.0": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- Added a new restore transaction callback `RestoreTransactions(Action<bool, string> callback)` to obtain the error string when RestoreTransactions is not successful (`IAppleExtensions` and `IGooglePlayStoreExtensions`).\n- Added a new initialize failed callback `IStoreListener.OnInitializeFailed(InitializationFailureReason, string)` to obtain the error string when OnInitializeFailed is invoked.\n- Added a new setup failed callback `IStoreCallback.OnSetupFailed(InitializationFailureReason, string)` to obtain the error string when OnSetupFailed is invoked.\n- Added a new FetchAdditionalProducts. The failCallback contains an error string. `IStoreController.FetchAdditionalProducts(HashSet<ProductDefinition>, Action, Action<InitializationFailureReason, string>)`\n- Apple - `Product.appleOriginalTransactionId` : Returns the original transaction ID. This field is only available when the purchase was made in the active session.\n- Apple - `Product.appleProductIsRestored` : Indicates whether the product has been restored.\n- GooglePlay - `IGooglePlayConfiguration.SetFetchPurchasesExcludeDeferred(bool exclude)` has been added to revert to the previous behaviour. This is not recommended and should only be used if `Deferred` purchases are handled in your `IStoreListener.ProcessPurchase`.\n- GooglePlay - `IGooglePlayStoreExtensions.GetPurchaseState(Product product)` has been added to obtain the `GooglePurchaseState` of a product.\n- GooglePlay - Added missing values to `GoogleBillingResponseCode` in order to output it in `PurchaseFailureDescription`'s message when available.\n- Codeless - Added to the [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.6/manual/IAPButton.html) the option to add a script for the On Transactions Restored: `void OnTransactionsRestored(bool success, string? error)`\n\n### Changed\n- Upgraded `com.unity.services.core` from 1.3.1 to 1.5.2\n- Upgraded `com.unity.services.analytics` from 4.0.1 to 4.2.0\n- The old OnInitializeFailed `OnInitializeFailed(InitializationFailureReason error)` was marked `Obsolete`\n- The old OnSetupFailed `OnSetupFailed(InitializationFailureReason reason)` was marked `Obsolete`\n- The old FetchAdditionalProducts `FetchAdditionalProducts(HashSet<ProductDefinition> additionalProducts, Action successCallback, Action<InitializationFailureReason> failCallback)` was marked `Obsolete`\n- The old restore transaction callback `RestoreTransactions(Action<bool> callback)` was marked `Obsolete` (`IAppleExtensions` and `IGooglePlayStoreExtensions`).\n- Apple - Transactions received from Apple that are invalid (where the product is not entitled) will no longer output the `Finishing transaction` log. This only affects transactions that never reached the `ProcessPurchase`.\n- GooglePlay - The enum `GooglePurchaseState` now recognizes `4` as `Deferred`.\n\n### Fixed\n- Analytics - A ServicesInitializationException introduced in Analytics 4.3.0 is now handled properly.\n- Analytics - Fixed an issue where transactions events were invalidated when there was no localization data for a product.\n- GooglePlay - Fixed a `NullReferenceException` when querying sku details while the BillingClient is not ready.\n- GooglePlay - Fixed [Application Not Responding (ANR)](https://developer.android.com/topic/performance/vitals/anr) when foregrounding the application while disconnected from the Google Play Store.\n- GooglePlay - Limited the occurence of `PurchasingUnavailable` errors when retrieving products while in a disconnected state to once per connection.\n- GooglePlay - `Deferred` purchases are, by default, no longer sent to `IStoreListener.ProcessPurchase` when fetching purchases. This avoids the possibility of granting products that were not paid for. These purchases will only be processed once they become `Purchased`. This can be reverted with `IGooglePlayConfiguration.SetFetchPurchasesExcludeDeferred(bool exclude)` to not exclude them, but `Deferred` purchases will need to be handled in `IStoreListener.ProcessPurchase`."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.6.0"
      },
      "upmCi": {
        "footprint": "ef0834f685faf8a4eee2aee17bdf896d10990621"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.6/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "42927a3b866999421b2df26e836f720feb67a743"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "6b59f05f7b6e3b0d00b7ca5248bf966399a80304",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.6.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.6.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.5.2",
        "com.unity.services.analytics": "4.2.0"
      }
    },
    "4.5.2": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.5.2"
      },
      "upmCi": {
        "footprint": "8d7fcd58912dafc667eb886e77d0c64cb61f2cdb"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.5/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "2e002e868803fadde53e54c4029e776932314588"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "a94bc4ac57830976d8782b5f5da01ce45f517f2b",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.5.2.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.5.2",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      }
    },
    "4.5.1": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.5.1"
      },
      "upmCi": {
        "footprint": "bfa3c3fe856a3713d41034c9eb9b81a8ac896f44"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "0e6a0e037cbfe72c55e5eff3c186ef29484f6636"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "f1d12a6c12403ebc726e870fec0b0eecee2c69cd",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.5.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.5.1",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      }
    },
    "4.5.0": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.5.0"
      },
      "upmCi": {
        "footprint": "ef72f04760c486d0d36b36a54497a5213b12e03a"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "fd22d9cd3bd08b92a9b38e4fbfc1391c45b5e538"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "17d22453009609be06a949894ccacaa06e62bd56",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.5.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.5.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      }
    },
    "4.4.1": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.4.1"
      },
      "upmCi": {
        "footprint": "a69c6d1780588a2c6705495db80ad434c9e1f04e"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "9dba5d5eda45d5841b3bcb9fadeba1b2ed5ef45b"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "4ffc6c2ed11cbda34b8442b9e4321ac7166954bf",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.4.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.4.1",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      }
    },
    "4.4.0": {
      "dist": {
        "shasum": "e4603c417e7722d8db0b35e3c1b3e74fe851d48a",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.4.0.tgz"
      },
      "upmCi": {
        "footprint": "96eed2b3c93a18c9512177b87bbc7c736957dec9"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "94c5a447a90fc84222a89d4cffe216b3cfba7ef6"
      },
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap",
          "configurePath": "Project/Services/In-App Purchasing",
          "groupName": "Monetize"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- GooglePlay - Google Play Billing Library version 4.0.0.\n  - The Multi-quantity feature is not yet supported by the IAP package and will come in a future update. **Do not enable `Multi-quantity` in the Google Play Console.**\n  - Add support for\n      the [IMMEDIATE_AND_CHARGE_FULL_PRICE](https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.ProrationMode#IMMEDIATE_AND_CHARGE_FULL_PRICE)\n      proration mode. Use `GooglePlayProrationMode.ImmediateAndChargeFullPrice` for easy access.\n\n### Fixed\n- GooglePlay - Fix `IGooglePlayConfiguration.SetDeferredPurchaseListener`\n  and `IGooglePlayConfiguration.SetDeferredProrationUpgradeDowngradeSubscriptionListener` callbacks sometimes not being\n  called from the main thread.\n- GooglePlay - When configuring `IGooglePlayConfiguration.SetQueryProductDetailsFailedListener(Action<int> retryCount)`, the action will be invoked with retryCount starting at 1 instead of 0.\n- GooglePlay - Added a validation when upgrading/downgrading a subscription that calls `IStoreListener.OnPurchaseFailed` with `PurchaseFailureReason.ProductUnavailable` when the old transaction id is empty or null. This can occur when attempting to upgrade/downgrade a subscription that the user doesn't own."
      },
      "unity": "2020.3",
      "samples": [
        {
          "path": "Samples~/01 BuyingConsumables",
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase."
        },
        {
          "path": "Samples~/02 BuyingSubscription",
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription."
        },
        {
          "path": "Samples~/03 FetchingAdditionalProducts",
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller."
        },
        {
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation",
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP."
        },
        {
          "path": "Samples~/05 LocalReceiptValidation",
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store."
        },
        {
          "path": "Samples~/06 InitializeGamingServices",
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API"
        },
        {
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt",
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts."
        },
        {
          "path": "Samples~/Apple App Store - 02 RestoringTransactions",
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application."
        },
        {
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases",
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations."
        },
        {
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt",
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases."
        },
        {
          "path": "Samples~/Apple App Store - 05 FraudDetection",
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud."
        },
        {
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices",
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information."
        },
        {
          "path": "Samples~/Apple App Store - 07 gettingProductDetails",
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details."
        },
        {
          "path": "Samples~/Apple App Store - 08 PromptingProducts",
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store."
        },
        {
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet",
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes."
        },
        {
          "path": "Samples~/Apple App Store - 10 CanMakePayments",
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device."
        },
        {
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription",
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service."
        },
        {
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription",
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service."
        },
        {
          "path": "Samples~/Google Play Store - 02 RestoringTransactions",
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application."
        },
        {
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange",
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes."
        },
        {
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases",
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations."
        },
        {
          "path": "Samples~/Google Play Store - 05 FraudDetection",
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud."
        }
      ],
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.4.0"
      },
      "name": "com.unity.purchasing",
      "version": "4.4.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      }
    },
    "4.3.0": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- GooglePlay - API `IGooglePlayConfiguration.SetQueryProductDetailsFailedListener(Action<int>)` called when Unity IAP fails to query product details. The `Action` will be called on each query product details failure with the retry count. See documentation \"Store Guides\" > \"Google Play\" for a sample usage."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.3.0"
      },
      "upmCi": {
        "footprint": "0ce80874c9229d35d310a72c5334ca2ee6617c75"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "22afb8218d24e44d7eaa04f57aed2bebe79b82e8"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.3.0",
      "_integrity": "sha512-u8wDxLUMTkLg3i49rJaAX0645J04KKChxGs3SWXq1EiC3Uzw59v3s224N1j1/NEaFfBc1CKjJRjOfd7uSv2Otw==",
      "_resolved": "/tmp/com.unity.purchasing@4.3.0-r4htmuzd.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.3.0-r4htmuzd.tgz",
      "dist": {
        "shasum": "c65999ca24df78eea62c5ad5d12d9c0d7ebb585f",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.3.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.3.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      }
    },
    "4.2.1": {
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Fixed\n- Downgrade `com.unity.services.core` from 1.4.1 to 1.3.1 due to a new bug found in 1.4.1"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.2.1"
      },
      "upmCi": {
        "footprint": "5d77653888c5b36e3c4caa909124141ea75b1c19"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "258ef39fae29e6ea64d6813cd615b9424e3a9955"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.2.1",
      "_integrity": "sha512-vxcTKglAYHspn+5LMPZpWhFmv/q+BBJ3ak5wqk+mkbNRgAPDDOU4BWm/MIngfUy30LNkhAqoKqT3B1eNtKri7A==",
      "_resolved": "/tmp/com.unity.purchasing@4.2.1-90lcv64_.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.2.1-90lcv64_.tgz",
      "dist": {
        "shasum": "ec768894c0d685f8eee8ff3a37e0377b85616ac4",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.2.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.2.1",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      }
    },
    "4.1.5": {
      "unity": "2019.4",
      "_upm": {
        "changelog": "### Fixed\n- GooglePlay - Fixed a null reference exception introduced in Unity IAP 4.1.4 that could happen when cancelling an in-app purchase."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.5"
      },
      "upmCi": {
        "footprint": "4522553ac350509286a56df3b19e3e6ef28c8e2e"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "e85a08b1c40e0237d1455cd2032430b72b82d183"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.5",
      "_integrity": "sha512-28Af8xbg57WVngWfOz8BBXNMBPAlcwos0/jEeUruj3ROqu7qr+1c284dTyKPq3Nbbz6lg3N6uY4NLp6ixLPO1A==",
      "_resolved": "/tmp/com.unity.purchasing@4.1.5-tmdej03i.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.1.5-tmdej03i.tgz",
      "dist": {
        "shasum": "ec2a2ec4e647e988e6cc8c7cdb00da6f7ebdaa74",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.1.5.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.1.5",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      }
    },
    "4.2.0-pre.2": {
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n- Support for Unity Analytics TransactionFailed event.\n- Sample showcasing how to initialize [Unity Gaming Services](https://unity.com/solutions/gaming-services) using the [Services Core API](https://docs.unity.com/ugs-overview/services-core-api.html)\n\n### Changed\n- The Analytics notice in the In-App Purchasing service window has been removed for Unity Editors 2022 and up."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.2.0-pre.2"
      },
      "upmCi": {
        "footprint": "e5c58b5ba0a54e9b6ab4dc8e4ce89ef8cd8c7680"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "64dd87f37c44581d6f8ba38181a7e3661b01999b"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.2.0-pre.2",
      "_integrity": "sha512-0pfcm7x7vYlIbR94xglSzgXnsa2xWpAEfh2eUTHcRRY9LqR3VmtTGY7QvpcnnRUM866UB9g1erWaHNI9Maw8Hg==",
      "_resolved": "/tmp/com.unity.purchasing@4.2.0-pre.2-78blylhp.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.2.0-pre.2-78blylhp.tgz",
      "dist": {
        "shasum": "6bc4a164ffa83b373084d3a1d4c5cfe08f875ce7",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.2.0-pre.2.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.2.0-pre.2",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.0-pre.2"
      }
    },
    "4.2.0-pre.1": {
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "upm": {
        "changelog": "### Added\n- Support for the [new Unity Analytics](https://unity.com/products/unity-analytics) [transaction event](https://docs.unity.com/analytics/AnalyticsSDKAPI.html#Transaction).\n- The package will now send telemetry diagnostic and metric events to help improve the long-term reliability and performance of the package.\n\n### Changed\n- The minimum Unity Editor version supported is 2020.3.\n- The In-App Purchasing service window now links to the [new Unity Dashboard](https://dashboard.unity3d.com/) for Unity Editors 2022 and up.\n\n### Fixed\n- GooglePlay - Fixed OnInitializeFailed never called if GooglePlay BillingClient is not ready during initialization.\n- GooglePlay - GoogleBilling is allowed to initialize correctly even if the user's Google account is logged out, so long as it is linked. The user will need to log in to their account to continue making purchases.\n- Fixed a build error `DirectoryNotFoundException` that occurred when the build platform was iOS or tvOS and the build target was another platform."
      },
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.2.0-pre.1"
      },
      "upmCi": {
        "footprint": "45c6cd469210712b24e54a933882ed9f294cee0f"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "e75af968366fd36fded712b3cb4f41e83df8f5a7"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.2.0-pre.1",
      "_integrity": "sha512-a9vWtcrXEh9dk4Q3H8oKDHdW2szuw4GwVEWRovATfZXm9HAkx0mKqfNin8dRuJKeUXPdNtOo8QxU+mvGwvJMsQ==",
      "_resolved": "/tmp/com.unity.purchasing@4.2.0-pre.1-z475y7ny.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.2.0-pre.1-z475y7ny.tgz",
      "dist": {
        "shasum": "61c65250a5eff1dd5d9d770f4e01d0d61cc0ad67",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.2.0-pre.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.2.0-pre.1",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.0-pre.1"
      }
    },
    "4.1.4": {
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "upm": {
        "changelog": "### Fixed\n- GooglePlay - Fixed issue where if an app is backgrounded while a purchase is being processed, \nan `OnPurchaseFailed` would be called with the purchase failure reason `UserCancelled`, even if the purchase was successful."
      },
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.4"
      },
      "upmCi": {
        "footprint": "ac1e0aec8721b92c8930e070637d8ef9b1f34811"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "25048fc7bf20fd8f0a1a548fc73d024ffa7b25fe"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.4",
      "_integrity": "sha512-0POojiFiElgU11jgSlSqRuByH0wY8Ky0rcrw9Svx91F8eWdmqgJnIqnphQoWtkk1VRnheXNEA45JqglE/+itHA==",
      "_resolved": "/tmp/com.unity.purchasing@4.1.4-wp_1vbme.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.1.4-wp_1vbme.tgz",
      "dist": {
        "shasum": "de29ca230fe685508fc13b2cb1e02df76a3db976",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.1.4.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.1.4",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      }
    },
    "4.1.3": {
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.3"
      },
      "upmCi": {
        "footprint": "fa8647791a2c58a50fb03a512adde2fb201c31ad"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "8207d5de2cd24c44f9756fa5c4332ee2298ef83c"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.3",
      "_integrity": "sha512-deGYiprIOE7KTIh4K+jkvWVxRR1nseuGRvQ0s5+glZjyp6FkLac4Ul7v3Pjc0+WNFlzD/SO8Ow/HZQv276iitQ==",
      "_resolved": "/tmp/com.unity.purchasing@4.1.3-162rq6ja.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.1.3-162rq6ja.tgz",
      "dist": {
        "shasum": "7d9b419098e4967f29dccef25b18c59b84e8b77d",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.1.3.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.1.3",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      }
    },
    "4.1.2": {
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.2"
      },
      "upmCi": {
        "footprint": "14114633bfbea462e56753c8d262560ce47c6d5d"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "c73a3b5ce4e0a8eb429214ad6702ceb8ece5fabe"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.2",
      "_integrity": "sha512-rJEWxkZxzMHWSi5cozl4Q6zSlwqM3/zkO/IB3w/nOmGKXl0vHjhddYkqvf6+2RdEyEVrPMYaR+YNCDTGYE50pg==",
      "_resolved": "/pkgprom/com.unity.purchasing-4.1.2.tgz",
      "_from": "file:com.unity.purchasing-4.1.2.tgz",
      "dist": {
        "shasum": "fed3762eab4ff10fa5e6e222e57da813a20603f6",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.1.2.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.1.2",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      }
    },
    "4.1.1": {
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.1"
      },
      "upmCi": {
        "footprint": "a5a3d3d37c9518a93f2929b2e6c8333086ca888d"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "3234a0fb16eb34ac949491c4855256bba159c59c"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.1",
      "_integrity": "sha512-tY5P2rBGefihKwiYU41vmypXJsxAigAhKNwmluFPTc1alMRVt7pkLHcPU0RVDh6j4c94fC7tIyloUf68lsK2xA==",
      "_resolved": "/pkgprom/com.unity.purchasing-4.1.1.tgz",
      "_from": "file:com.unity.purchasing-4.1.1.tgz",
      "dist": {
        "shasum": "c41d0e4ef6c399f0a7f93592d2af11ac30e4b794",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.1.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.1.1",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      }
    },
    "4.1.0": {
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.0"
      },
      "upmCi": {
        "footprint": "3d8d63f0da01e5e95202a800a931897e64085113"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "bc618e163eb5028b2c8a98380239563f5206b5e0"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.0",
      "_integrity": "sha512-dlU6NWWQstlofReHctbq7Aofoll1o2fd9vNv9SRayyFFrtjHIE7I2a52XFz43jtVtu2c75+ZpGDg941sxQGdlw==",
      "_resolved": "/pkgprom/com.unity.purchasing-4.1.0.tgz",
      "_from": "file:com.unity.purchasing-4.1.0.tgz",
      "dist": {
        "shasum": "b06e5e80c0c1f65153af26b454549fbeb5ef96de",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.1.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.1.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      }
    },
    "4.0.3": {
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.0.3"
      },
      "upmCi": {
        "footprint": "53f8240fcc408eddb86317bf54a6e6ad32be1157"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "4dccbbbbdb61c481d208d59a92c0c058ccad4e32"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-4.0.3.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@4.0.3",
      "dist": {
        "shasum": "c7959a9b519b93c40c6922efdd761c62fa649a4f",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.0.3.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.0.3",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      }
    },
    "4.0.0": {
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.0.0"
      },
      "upmCi": {
        "footprint": "81be9f887b655d3a81fc1cae2038086b57defb77"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "a20b4d1c1d35b36da80ef223bcc1e73b4c21a590"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-4.0.0.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@4.0.0",
      "dist": {
        "shasum": "8f9661f4784368650e7ee5b13e9dc9ce198a4ec0",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-4.0.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "4.0.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      }
    },
    "3.2.3": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.2.3"
      },
      "upmCi": {
        "footprint": "4e4a85926086c51c18a39e5303711f3c80294410"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "118d0cf33fe3071fea1b29143e914f3ee0b1c8e0"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.2.3.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.2.3",
      "dist": {
        "shasum": "82e4ea005ad8581b01d720a60ace2d48fb25b2cd",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.2.3.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.2.3",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores(*). (*) NOTE Samsung Galaxy is obsolete and will be removed in v4. Please use Unity Distribution Platform for Samsung Galaxy Apps support.\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      }
    },
    "3.2.2": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.2.2"
      },
      "upmCi": {
        "footprint": "602378ccee1decd21b2cecfdac70ef38bee7dcc4"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "6ad60ad670b28d3a131388481318ce0d0ca2bc0d"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.2.2.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.2.2",
      "dist": {
        "shasum": "6cd70d42d971151d6ba3c0aaa66076eb614bb111",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.2.2.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.2.2",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores(*). (*) NOTE Samsung Galaxy is obsolete and will be removed in v4. Please use Unity Distribution Platform for Samsung Galaxy Apps support.\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      }
    },
    "3.2.1": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.2.1"
      },
      "upmCi": {
        "footprint": "4b20a068747ccdc0fdbb55b1d2d4b466df4899ac"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "6e71b2659d2f21928de1f34d82964edeab391788"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.2.1.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.2.1",
      "dist": {
        "shasum": "0af9a4a2446fa6ce536bf4f3837d946b2acba7af",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.2.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.2.1",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores(*). (*) NOTE Samsung Galaxy is obsolete and will be removed in v4. Please use Unity Distribution Platform for Samsung Galaxy Apps support.\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      }
    },
    "3.1.0": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.1.0"
      },
      "upmCi": {
        "footprint": "b4c63377d26d99d960f1cde3a28338088869f989"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "0fda3405fb97bcc9ca72bf03834fcfee6061bacc"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.1.0.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.1.0",
      "dist": {
        "shasum": "36118bd589117343d6257dcdb6e491db1fecb84c",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.1.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.1.0",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      }
    },
    "3.0.2": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.2"
      },
      "upmCi": {
        "footprint": "5346a222b80ccabc199078867e235b983df19f7f"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "ec841c2f6c39ccd5c0138306f24db7ad69ece916"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.2",
      "dist": {
        "shasum": "1b488f7728e2806d5a8dab43e587f5b4141aec7e",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.0.2.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.0.2",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      }
    },
    "3.0.1": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.1"
      },
      "upmCi": {
        "footprint": "c38876eeff1bd9e649231f4074a92d097222db04"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "6085954d3b18522633eb64da34545a88092f85b4"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.1",
      "dist": {
        "shasum": "b2479d67766e497fc7bd1c550727462d38b29a28",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.0.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.0.1",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      }
    },
    "3.0.0-pre.6": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.0-pre.6"
      },
      "upmCi": {
        "footprint": "84da447610b535d811781efaf84f7c76deb1edd1"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "8ba7482e36030bcf06019e3d0be37c3a72e5920c"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.0.0-pre.6.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.0-pre.6",
      "dist": {
        "shasum": "9dc1b28c73aef7948485236c7abf2863fcb13745",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.0.0-pre.6.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.0.0-pre.6",
      "description": "*** PRE RELEASE ***\n\nNote: This In-App-Purchasing 3.0 package is a pre-release version and is not yet intended for use with existing projects.\n\nIMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "3.0.0-pre.5": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.0-pre.5"
      },
      "upmCi": {
        "footprint": "ec6e8563be7922d374545a1599e5a8b1f73eaad9"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "a9123c98c11f486a2db5c60c738c42939c36fbe6"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.0.0-pre.5.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.0-pre.5",
      "dist": {
        "shasum": "745eec7d23b290398e387a2f5761a9b3623efcac",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.0.0-pre.5.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.0.0-pre.5",
      "description": "*** PRE RELEASE ***\n\nNote: This In-App-Purchasing 3.0 package is a pre-release version and is not yet intended for use with existing projects.\n\nIMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "2.2.2": {
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "ee61dd3b9b07a5b3c6d54795306661ce1d0718ad"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "b61346fdaebb6970197c08161507384464e4fc08"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.2.2",
      "dist": {
        "shasum": "a2fcf1a4008a60d23c612a484d8ad93e844a17e3",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.2.2.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "2.2.2",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "2.2.1": {
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "f07d4c5151eb13fff9661b62816f29772a916fe8"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "4dd280f1c3109962b050ef4c47c2d0613c46258a"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.2.1",
      "dist": {
        "shasum": "6b8f110c363bf9e7b3e7601d217002a4d798885c",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.2.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "2.2.1",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "2.2.0": {
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "1dfbe2b8a8744293dd0deef05e90fb159c28a854"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "9235933a13c29fcf514c2e3c9d44f240397d42ce"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.2.0",
      "dist": {
        "shasum": "4d61e485801b2c746ad0a26d173a3be675b6f1bc",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.2.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "2.2.0",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "3.0.0-pre.4": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.0-pre.4"
      },
      "upmCi": {
        "footprint": "ea31692b85463aabdaadcf01f1cc49d7a80da861"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "421b0189e535cf53aaabe59ff2cde8db759be3f6"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.0-pre.4",
      "dist": {
        "shasum": "50b27339af08a0c12930f281e460326275a6afc5",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.0.0-pre.4.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.0.0-pre.4",
      "description": "*** PREVIEW RELEASE ***\n\n*** Not intended for use with existing projects!\n\n*** PREVIEW RELEASE ***\n\n\nUnity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "3.0.0-pre.3": {
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.0-pre.3"
      },
      "upmCi": {
        "footprint": "aa72ff9cbb68918ba39593bbc307e623c34f070f"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "1b885452215a17c49f708fd1166b89136eea15d4"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.0-pre.3",
      "dist": {
        "shasum": "c2e0d9a4988f8eda8f482db9c451af22afc834d2",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-3.0.0-pre.3.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "3.0.0-pre.3",
      "description": "*** PREVIEW RELEASE ***\n\n*** Not intended for use with existing projects!\n\n*** PREVIEW RELEASE ***\n\n\nUnity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "2.1.1": {
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "ab79b0c58006f61970a2136b4cba9ca76fde0edc"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "d5cc580dc415ee75cae47a1ac41a1cad0118c408"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.1.1",
      "dist": {
        "shasum": "ec9602d9af54c98a2a7202d96d85a7c874378f2c",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.1.1.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "2.1.1",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "2.1.0": {
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "22c4e2f34edf6ab42c6514f44809a046bf184c50"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "ce1628fd82b7c3627c8de4ab64223cac2e6b564b"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.1.0",
      "dist": {
        "shasum": "c0e438b9ecd7c30e48b5e74e2257aa8839a03f2f",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.1.0.tgz"
      },
      "name": "com.unity.purchasing",
      "version": "2.1.0",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "displayName": "In App Purchasing",
      "type": "asset",
      "host": "editor",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      }
    },
    "2.0.6": {
      "repository": {
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/purchasing/com.unity.purchasing",
        "revision": "37674e38ef7548642e33bc97797a71b5eadbecac",
        "type": "git"
      },
      "dist": {
        "shasum": "5d1eb9889e23dad9f0b110fb06138347e196a210",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.0.6.tgz"
      },
      "license": "Unity Companion Package License v1.0",
      "scripts": {},
      "_id": "com.unity.purchasing@2.0.6",
      "unity": "2018.1",
      "name": "com.unity.purchasing",
      "version": "2.0.6",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "displayName": "In App Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ]
    },
    "2.0.5": {
      "repository": {
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/purchasing/com.unity.purchasing",
        "revision": "37674e38ef7548642e33bc97797a71b5eadbecac",
        "type": "git"
      },
      "dist": {
        "shasum": "0c280e5200475a673d9c161e46bbfd35a1b42ff6",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.0.5.tgz"
      },
      "license": "Unity Companion Package License v1.0",
      "scripts": {},
      "_id": "com.unity.purchasing@2.0.5",
      "unity": "2018.1",
      "name": "com.unity.purchasing",
      "version": "2.0.5",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "displayName": "In App Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ]
    },
    "2.0.3": {
      "dist": {
        "shasum": "760d7807b5abf8fe90aa2af559d48a249850b1be",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.0.3.tgz"
      },
      "license": "Unity Companion Package License v1.0",
      "_id": "com.unity.purchasing@2.0.3",
      "unity": "2018.1",
      "name": "com.unity.purchasing",
      "version": "2.0.3",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "displayName": "In App Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ]
    },
    "2.0.1": {
      "dist": {
        "shasum": "821cbd40dc6fb44ce5fd6d20ee6d4376685d0629",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.0.1.tgz"
      },
      "license": "Unity Companion Package License v1.0",
      "_id": "com.unity.purchasing@2.0.1",
      "unity": "2018.1",
      "name": "com.unity.purchasing",
      "version": "2.0.1",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "displayName": "In App Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ]
    },
    "2.0.0": {
      "dist": {
        "shasum": "e7b0e24f5889f6780b7c964abdac187cc9ff8bae",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-2.0.0.tgz"
      },
      "license": "Unity Companion Package License v1.0",
      "_id": "com.unity.purchasing@2.0.0",
      "unity": "2018.1",
      "name": "com.unity.purchasing",
      "version": "2.0.0",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "displayName": "In App Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ]
    },
    "0.0.19": {
      "dist": {
        "shasum": "abde5c6409b60f1ad2282018a931094eb7dc986a",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.19.tgz"
      },
      "_id": "com.unity.purchasing@0.0.19",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.19",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.18": {
      "dist": {
        "shasum": "72967f00eb1bc9bf636e90087a83d7758f7e04ee",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.18.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.18",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.18",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.17": {
      "dist": {
        "shasum": "528d6dc75efbdac4f1b2268512be013666b24057",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.17.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.17",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.17",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.16": {
      "dist": {
        "shasum": "ece18364625774fcea4ba0611fd0316c996a6b25",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.16.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.16",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.16",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.15": {
      "dist": {
        "shasum": "36430d4eb2a7de54c1950f3108ad0467b8e11cd7",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.15.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.15",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.15",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.14": {
      "dist": {
        "shasum": "bbc336a66f8c88dacc9fbc9c046e169c6c3d4ccc",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.14.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.14",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.14",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.13": {
      "dist": {
        "shasum": "53eb2a82f7377f3be616fe19fa1c54d62881f159",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.13.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.13",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.13",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.12": {
      "dist": {
        "shasum": "27ccab792f6141604a52754c2ad5fd81a795ea6c",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.12.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.12",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.12",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.11": {
      "dist": {
        "shasum": "75c08fc93979aed27e78b7a91815187d9ee254a3",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.11.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.11",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.11",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {}
    },
    "0.0.10": {
      "dist": {
        "shasum": "4e63720848aca1f5f2a9be1ca972d2babeb3a81c",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.10.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.10",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.10",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "*"
      }
    },
    "0.0.9": {
      "dist": {
        "shasum": "d6d83b382815279615bd627047fcfa4961d1530f",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.9.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.9",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.9",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.9"
      }
    },
    "0.0.8": {
      "dist": {
        "shasum": "d4ad34fdd61e7c9fae9e8e898e4076e24d3a6135",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.8.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.8",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.8",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.8"
      }
    },
    "0.0.7": {
      "dist": {
        "shasum": "ff5ed41432162cdba1ba90c086a820c161547d60",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.7.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.7",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.7",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.7"
      }
    },
    "0.0.6": {
      "dist": {
        "shasum": "ba8421b30c41cf766541287e94063909dcd5a65c",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.6.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.6",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.6",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.5"
      }
    },
    "0.0.5": {
      "dist": {
        "shasum": "571718288f427cb84af4d3d89b9c25aa779e26eb",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.5.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.5",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.5",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.4"
      }
    },
    "0.0.4": {
      "dist": {
        "shasum": "00b83b99b0166f5f75a02b18047bd8ad148fa2d4",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.4.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.4",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.4",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.3"
      }
    },
    "0.0.3": {
      "dist": {
        "shasum": "8bd77b7df6f003a1600e2c55f25f9de94da2e15e",
        "tarball": "https://download.packages.unity.com/com.unity.purchasing/-/com.unity.purchasing-0.0.3.tgz"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.3",
      "unity": "2017.1",
      "name": "com.unity.purchasing",
      "version": "0.0.3",
      "description": "Unity Purchasing",
      "displayName": "",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "UnityAnalytics": "0.0.2"
      }
    }
  },
  "etag": "\"ac4a66a6a5a9827729d89dbf7166c17e\"",
  "time": {
    "4.9.3": "2023-06-14T11:29:13Z",
    "4.9.2": "2023-06-07T08:49:12Z",
    "4.8.0": "2023-04-14T10:27:28Z",
    "4.7.0": "2023-03-10T15:32:07Z",
    "4.6.0": "2023-02-13T08:05:14Z",
    "4.5.2": "2022-12-10T14:36:14Z",
    "4.5.1": "2022-10-27T08:49:39Z",
    "4.5.0": "2022-10-03T13:09:42Z",
    "4.4.1": "2022-08-22T09:12:30Z",
    "4.4.0": "2022-07-28T14:26:29Z",
    "4.3.0": "2022-07-18T14:59:06Z",
    "4.2.1": "2022-06-22T17:45:45Z",
    "4.1.5": "2022-05-23T10:50:47Z",
    "4.2.0-pre.2": "2022-05-06T15:45:55Z",
    "4.2.0-pre.1": "2022-05-02T18:03:08Z",
    "4.1.4": "2022-04-12T22:32:11Z",
    "4.1.3": "2022-02-08T15:17:49Z",
    "4.1.2": "2021-11-29T18:14:36Z",
    "4.1.1": "2021-11-02T10:57:34Z",
    "4.1.0": "2021-10-15T16:12:36Z",
    "4.0.3": "2021-08-24T15:42:23Z",
    "4.0.0": "2021-07-28T11:37:38Z",
    "3.2.3": "2021-07-14T13:28:08Z",
    "3.2.2": "2021-06-04T17:06:14Z",
    "3.2.1": "2021-05-19T18:43:27Z",
    "3.1.0": "2021-04-19T21:50:08Z",
    "3.0.2": "2021-04-01T15:37:26Z",
    "3.0.1": "2021-03-09T01:41:13Z",
    "3.0.0-pre.6": "2021-02-16T00:06:14Z",
    "3.0.0-pre.5": "2021-02-12T16:44:26Z",
    "2.2.2": "2021-01-22T19:50:44Z",
    "2.2.1": "2020-11-20T18:54:34Z",
    "2.2.0": "2020-11-19T15:50:29Z",
    "3.0.0-pre.4": "2020-11-18T02:00:48Z",
    "3.0.0-pre.3": "2020-11-14T00:54:07Z",
    "2.1.1": "2020-09-15T14:41:21Z",
    "2.1.0": "2020-08-18T19:55:57Z",
    "2.0.6": "2019-04-03T12:13:03Z",
    "2.0.5": "2019-04-03T12:13:01Z",
    "2.0.3": "2019-04-03T12:12:59Z",
    "2.0.1": "2019-04-03T12:12:56Z",
    "2.0.0": "2019-04-03T12:12:54Z",
    "0.0.19": "2019-04-03T12:12:51Z",
    "0.0.18": "2019-04-03T12:12:49Z",
    "0.0.17": "2019-04-03T12:12:46Z",
    "0.0.16": "2019-04-03T12:12:44Z",
    "0.0.15": "2019-04-03T12:12:41Z",
    "0.0.14": "2019-04-03T12:12:38Z",
    "0.0.13": "2019-04-03T12:12:36Z",
    "0.0.12": "2019-04-03T12:12:34Z",
    "0.0.11": "2019-04-03T12:12:31Z",
    "0.0.10": "2019-04-03T12:12:28Z",
    "0.0.9": "2019-04-03T12:12:26Z",
    "0.0.8": "2019-04-03T12:12:23Z",
    "0.0.7": "2019-04-03T12:12:21Z",
    "0.0.6": "2019-04-03T12:12:18Z",
    "0.0.5": "2019-04-03T12:12:16Z",
    "0.0.4": "2019-04-03T12:12:14Z",
    "0.0.3": "2019-04-03T12:12:11Z"
  }
}
